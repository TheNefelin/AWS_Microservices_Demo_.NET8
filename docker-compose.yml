version: '3.8'

services:
  service-discovery:
    build:
      context: .
      dockerfile: ServiceDiscovery/Dockerfile
    ports:
      - "5000:5000"
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    ports:
      - "5001:5001"
    environment:
      - ServiceDiscoveryUrl=http://service-discovery:5000
      - ASPNETCORE_URLS=http://+:5001
    depends_on:
      - service-discovery
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    ports:
      - "5002:5002"
    environment:
      - ServiceDiscoveryUrl=http://service-discovery:5000
      - ASPNETCORE_URLS=http://+:5002
    depends_on:
      - service-discovery
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5003:5003"
    environment:
      - ServiceDiscoveryUrl=http://service-discovery:5000
      - ASPNETCORE_URLS=http://+:5003
    depends_on:
      - service-discovery
      - product-service
      - order-service
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  microservices-network:
    driver: bridge

volumes:
  app-data: